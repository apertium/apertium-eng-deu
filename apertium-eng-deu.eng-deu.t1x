<?xml version="1.0" encoding="UTF-8"?> <!-- -*- nxml -*- -->
<transfer default="chunk">

	<section-def-cats>
		<def-cat n="nom">
			<cat-item tags="n"/>
			<cat-item tags="n.*"/>
			<cat-item tags="np"/>
			<cat-item tags="np.*"/>
		</def-cat>
		<def-cat n="gen_nom">
			<cat-item tags="n.gen"/>
			<cat-item tags="n.*.gen"/>
		</def-cat>
		<def-cat n="cog_np">
			<cat-item tags="np.cog"/>
			<cat-item tags="np.cog.*"/>
		</def-cat>
		<def-cat n="names">
			<cat-item tags="np.cog"/>
			<cat-item tags="np.cog.*"/>
			<cat-item tags="np.ant"/>
			<cat-item tags="np.ant.*"/>
		</def-cat>
		<def-cat n="location">
			<cat-item tags="np.loc.*"/>
			<cat-item tags="np.top.*"/>
		</def-cat>
		<def-cat n="det">
			<cat-item tags="det.ind.*"/>
			<cat-item tags="det.def.*"/>
			<cat-item tags="det.qnt.*"/>
			<cat-item tags="det.dem.*"/>
			<cat-item tags="det.pos.*"/>
		</def-cat>
		<def-cat n="adj">
			<cat-item tags="adj"/>
			<cat-item tags="adj.*"/>
		</def-cat>
		<def-cat n="num">
			<cat-item tags="num"/>
			<cat-item tags="num.*"/>
		</def-cat>
		<def-cat n="adv">
			<cat-item tags="adv"/>
			<cat-item tags="adv.*"/>
			<cat-item tags="preadv"/>
			<cat-item tags="preadv.*"/>
		</def-cat>
		<def-cat n="adv1">
			<cat-item tags="adv"/>
			<cat-item tags="preadv"/>
		</def-cat>
		<def-cat n="adv2">
			<cat-item tags="adv"/>
			<cat-item tags="adv.*"/>
			<cat-item tags="preadv"/>
			<cat-item tags="preadv.*"/>
			<cat-item tags="cnjadv"/>
		</def-cat>
		<def-cat n="itg">
			<cat-item tags="prn.itg"/>
			<cat-item tags="prn.itg.*"/>
			<cat-item tags="adv.itg"/>
			<cat-item tags="adv.itg.*"/>
		</def-cat>
		<def-cat n="prn"> <!-- others than prpers -->
			<cat-item tags="prn.dem.*"/>
			<cat-item tags="prn.ind.*"/>
			<!--<cat-item tags="prn.itg.*"/>-->
		</def-cat>
		<def-cat n="prpers">
			<cat-item lemma="prpers" tags="prn.*"/>
			<cat-item tags="prn.pos.*"/>
			<!--<cat-item tags="prn.pers.*"/>-->
		</def-cat>
		<def-cat n="prpers_subj">
			<cat-item lemma="prpers" tags="prn.subj.*"/>
		</def-cat>
		<def-cat n="prpos">
			<cat-item lemma="prpers" tags="prn.pos.*"/>
			<!-- <cat-item lemma="prpers" tags="prn.det.*"/> -->
		</def-cat>
		<def-cat n="prpers_det">
			<cat-item lemma="prpers" tags="prn.det"/>
			<cat-item lemma="prpers" tags="prn.det.*"/>
			<cat-item lemma="prpers" tags="prn.pos.*"/>
		</def-cat>
		<def-cat n="any_det">
			<cat-item tags="det.ind.*"/>
			<cat-item tags="det.def.*"/>
			<cat-item tags="det.qnt.*"/>
			<cat-item tags="det.dem.*"/>
			<cat-item tags="det.pos.*"/>
			<cat-item tags="prn.det"/>
			<cat-item tags="prn.det.*"/>
			<cat-item tags="prn.pos.*"/>
		</def-cat>
		<def-cat n="rel_prn">
			<cat-item tags="rel.*"/>
		</def-cat>
		<def-cat n="nouns">
			<cat-item lemma="prpers" tags="prn.*"/>
			<cat-item tags="np.*"/>
			<cat-item tags="n.*"/>
		</def-cat>
		<def-cat n="verbs"> <!-- any verb -->
			<cat-item tags="vblex"/>
			<cat-item tags="vblex.*"/>
			<cat-item tags="vbser.*"/>
			<cat-item tags="vbhaver.*"/>
			<cat-item tags="vbdo.*"/>
			<cat-item tags="vbmod.*"/>
			<cat-item tags="vaux.*"/>
		</def-cat>
		<def-cat n="verbm"> <!-- modal verb -->
			<cat-item tags="vbmod.*"/>
			<cat-item tags="vaux.*"/>
		</def-cat>
		<def-cat n="verbnm"> <!-- verb no modal -->
			<cat-item tags="vblex.*"/>
			<cat-item tags="vbser.*"/>
			<cat-item tags="vbhaver.*"/>
			<cat-item tags="vbdo.*"/>
		</def-cat>
		<def-cat n="verbaux">
			<cat-item tags="vbmod.*"/>
			<cat-item tags="vaux.*"/>
			<cat-item tags="vbdo.*"/>
			<cat-item tags="vbhaver.*"/>
			<cat-item tags="vbser.*"/>
		</def-cat>
		<def-cat n="verbdo">
			<cat-item tags="vbdo.*"/>
			<cat-item lemma="do" tags="vaux.*"/>
		</def-cat>
		<def-cat n="verbhave">
			<cat-item tags="vbhaver.*"/>
		</def-cat>
		<def-cat n="verbbe">
			<cat-item tags="vbser.*"/>
		</def-cat>
		<def-cat n="prep"> <!-- preposition -->
			<cat-item tags="pr"/>
			<cat-item tags="pr.*"/>
			<cat-item tags="pprep.*"/>
		</def-cat>
		<def-cat n="gen_prep">  <!-- German: genitive -->
			<cat-item lemma="outside" tags="pr"/>
		</def-cat>
		<def-cat n="dat_prep">  <!-- German: dative -->
			<cat-item lemma="at" tags="pr"/>
			<cat-item lemma="behind" tags="pr"/>
			<cat-item lemma="between" tags="pr"/>
			<cat-item lemma="by" tags="pr"/>
			<cat-item lemma="from" tags="pr"/>
			<cat-item lemma="in" tags="pr"/>
			<cat-item lemma="in front of" tags="pr"/>
			<cat-item lemma="of" tags="pr"/>
			<cat-item lemma="on" tags="pr"/>
			<cat-item lemma="to" tags="pr"/>
			<cat-item lemma="under" tags="pr"/>
			<cat-item lemma="with" tags="pr"/>
		</def-cat>
		<def-cat n="acc_prep">  <!-- German: accusative -->
			<cat-item lemma="against" tags="pr"/>
			<cat-item lemma="for" tags="pr"/>
		</def-cat>
		<def-cat n="conj">
			<cat-item tags="cnjcoo"/>
			<cat-item tags="cnjcoo.*"/>
			<cat-item tags="cnjsub"/>
			<cat-item tags="cnjsub.*"/>
			<cat-item tags="cnjadv"/>
			<cat-item tags="cnjadv.*"/>
		</def-cat>
		<def-cat n="coma">
			<cat-item tags="cm"/>
		</def-cat>
		<def-cat n="sent">
			<cat-item tags="sent"/>
		</def-cat>

		<def-cat n="and">
			<cat-item lemma="and" tags="cnjcoo"/>
		</def-cat>
		<def-cat n="go">
			<cat-item lemma="go" tags="vblex.*"/>
		</def-cat>
		<def-cat n="to">
			<cat-item lemma="to" tags="pr"/>
			<cat-item lemma="to" tags="pr.*"/>
		</def-cat>
		<def-cat n="got">
			<cat-item lemma="get" tags="vblex.*"/>
		</def-cat>
		<def-cat n="not">
			<cat-item lemma="not" tags="adv"/>
		</def-cat>
		<def-cat n="more">
			<cat-item lemma="more" tags="adv"/>
			<cat-item lemma="more" tags="preadv"/>
			<cat-item lemma="more" tags="det.*"/>
		</def-cat>
		<def-cat n="most">
			<cat-item lemma="most" tags="adv"/>
			<cat-item lemma="most" tags="preadv"/>
			<cat-item lemma="most" tags="det.*"/>
		</def-cat>
		<def-cat n="family">
			<cat-item lemma="family" tags="n"/>
			<cat-item lemma="family" tags="n.*"/>
		</def-cat>
		<def-cat n="mrs">
			<cat-item lemma="mr" tags="n.*"/>
			<cat-item lemma="ms" tags="n.*"/>
			<cat-item lemma="mrs" tags="n.*"/>
			<cat-item lemma="mr." tags="n.*"/>
			<cat-item lemma="ms." tags="n.*"/>
			<cat-item lemma="mrs." tags="n.*"/>
			<cat-item lemma="miss" tags="n.*"/>
		</def-cat>
		<def-cat n="periods">
			<cat-item lemma="day" tags="n.*"/>
			<cat-item lemma="week" tags="n.*"/>
			<cat-item lemma="month" tags="n.*"/>
			<cat-item lemma="year" tags="n.*"/>
		</def-cat>

		<def-cat n="xxxx">	<!-- for tests only to block rules -->
			<cat-item tags="xxxx"/>
		</def-cat>
	</section-def-cats>

	<section-def-attrs>
		<def-attr n="a_nom">
			<attr-item tags="n"/>
			<attr-item tags="n.acr"/>
			<attr-item tags="n.unc"/>
			<attr-item tags="np"/>
			<attr-item tags="np.ant"/>
			<attr-item tags="np.cog"/>
			<attr-item tags="np.loc"/>
			<attr-item tags="np.top"/>
		</def-attr>
		<def-attr n="a_cog">
			<attr-item tags="np.cog"/>
		</def-attr>
		<def-attr n="a_top">
			<attr-item tags="np"/>
			<attr-item tags="np.top"/>
			<attr-item tags="np.loc"/>
		</def-attr>
		<def-attr n="a_gen">			<!-- Gender -->
			<attr-item tags="m"/>
			<attr-item tags="f"/>
			<attr-item tags="nt"/>
			<attr-item tags="mf"/>
			<attr-item tags="mfn"/>
			<attr-item tags="GD"/>
		</def-attr>
		<def-attr n="a_nbr">			<!-- Number -->
			<attr-item tags="sg"/>
			<attr-item tags="pl"/>
			<attr-item tags="sp"/>
			<attr-item tags="ND"/>
		</def-attr>
		<def-attr n="a_cas">			<!-- Case -->
			<attr-item tags="nom"/>
			<attr-item tags="gen"/>
			<attr-item tags="dat"/>
			<attr-item tags="acc"/>
		</def-attr>
		<def-attr n="a_pers">			<!-- Person -->
			<attr-item tags="p1"/>
			<attr-item tags="p2"/>
			<attr-item tags="p3"/>
		</def-attr>
		<def-attr n="a_adj">
			<attr-item tags="adj"/>
			<attr-item tags="adj.comp"/>
			<attr-item tags="adj.sup"/>
			<attr-item tags="adj.sint"/>
			<attr-item tags="adj.sint.comp"/>
			<attr-item tags="adj.sint.sup"/>
		</def-attr>
		<def-attr n="a_sint_adj">
			<attr-item tags="adj.sint"/>
			<attr-item tags="adj.sint.comp"/>
			<attr-item tags="adj.sint.sup"/>
		</def-attr>
		<def-attr n="a_det">
			<attr-item tags="det.ind"/>
			<attr-item tags="det.def"/>
			<attr-item tags="det.qnt"/>
			<attr-item tags="det.dem"/>
			<attr-item tags="det.pos"/>
		</def-attr>
		<def-attr n="a_def_det">
			<attr-item tags="det.def"/>
		</def-attr>
		<def-attr n="a_det1">
			<attr-item tags="det"/>
		</def-attr>
		<def-attr n="a_itg">
			<attr-item tags="adv.itg"/>
			<attr-item tags="prn.itg"/>
		</def-attr>
		<def-attr n="a_prn">
			<attr-item tags="prn"/>
		</def-attr>
		<def-attr n="a_prn2"> <!-- others than prpers -->
			<attr-item tags="prn.dem"/>
			<attr-item tags="prn.ind"/>
			<attr-item tags="prn.itg"/>
		</def-attr>
		<def-attr n="a_tipus_prn">
			<attr-item tags="prn.subj"/>
			<attr-item tags="prn.obj"/>
			<attr-item tags="prn.tn"/>
			<attr-item tags="prn.iobj"/>
			<attr-item tags="prn.dobj"/>
		</def-attr>
		<def-attr n="a_prpos">
			<attr-item tags="prn.pos"/>
			<attr-item tags="prn.det"/>
			<attr-item tags="det.pos"/>
		</def-attr>
		<def-attr n="a_rel">
			<attr-item tags="rel"/>
			<attr-item tags="rel.nn"/>
			<attr-item tags="rel.an"/>
		</def-attr>
		<def-attr n="a_verb">
			<attr-item tags="vblex"/>
			<attr-item tags="vblex.sep"/>
			<attr-item tags="vbser"/>
			<attr-item tags="vbhaver"/>
			<attr-item tags="vbdo"/>
			<attr-item tags="vbmod"/>
			<attr-item tags="vaux"/>
		</def-attr>
		<def-attr n="a_temps">
			<attr-item tags="pp"/>
			<attr-item tags="ger"/>
			<attr-item tags="pii"/>
			<attr-item tags="pis"/>
			<attr-item tags="pri"/>
			<attr-item tags="past"/>
			<attr-item tags="inf"/>
			<attr-item tags="pres"/>
			<attr-item tags="pprs"/>
			<attr-item tags="subs"/>
			<attr-item tags="imp"/>
		</def-attr>
		<def-attr n="a_pr">
			<attr-item tags="pr"/>
		</def-attr>
		<def-attr n="a_conj">
			<attr-item tags="cnjcoo"/>
			<attr-item tags="cnjsub"/>
			<attr-item tags="cnjadv"/>
		</def-attr>
		<def-attr n="a_coma">
			<attr-item tags="cm"/>
		</def-attr>
	</section-def-attrs>

	<section-def-vars>
		<!--<def-var n="caseFirstWord" v="aa"/>  <!-#-(for use with testvoc)-->
		<def-var n="caseFirstWord" v="Aa"/>
		<def-var n="caseOtherWord" v="aa"/>
		<def-var n="v_temps"/>
		<def-var n="v_cas"/>
		<def-var n="v_gen"/>
		<def-var n="v_nbr"/>
		<def-var n="v_pers"/>
		<def-var n="v_a_adj"/>
		<def-var n="v_a_adj1"/>
		<def-var n="v_sint_adj"/>
		<def-var n="v_gen_adj"/>
		<def-var n="v_nbr_adj"/>
		<def-var n="v_cas_adj"/>
		<def-var n="v_typ_adj"/>
		<def-var n="v_a_nom"/>
		<def-var n="v_gen_nom"/>
		<def-var n="v_nbr_nom"/>
		<def-var n="v_cas_nom"/>
		<def-var n="v_pers_nom"/>
		<def-var n="v_pers_det"/>
		<def-var n="v_gen_det"/>
		<def-var n="v_nbr_det"/>
		<def-var n="v_cas_det"/>
		<def-var n="v_obj_prn"/>
		<def-var n="v_gen_prn"/>
		<def-var n="v_nbr_prn"/>
		<def-var n="v_cas_prn"/>
		<def-var n="v_pers_prn"/>
		<def-var n="v_temp_verb"/>
		<def-var n="v_pers_verb"/>
		<def-var n="v_nbr_verb"/>
		<def-var n="v_predicate"/>
		<def-var n="v_pers_tmp"/>
	</section-def-vars>


<!-- macros: 	(by wth)
	set_		store tag into variable (set_name stores value in variable v_name)
	chg_		change value of variable
	trim_		if "whole" already has this value, set variable to null
	rm_         remove tag from variable
	proc_       set variables for multiple words
-->
	
	<section-def-macros>

		<!-- (adj) test if it is sint / OUT: v_sint_adj -->
		<def-macro n="test-if-synthetic" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_sint_adj"/>
							<lit-tag v="adj.sint"/>
						</equal>
					</test>
					<let>
						<var n="v_sint_adj"/>
						<lit-tag v="sint"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_sint_adj"/>
						<lit v=""/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (verb) convert "pres" to "pri", "past" to "pii" / OUT: v_temps -->
		<def-macro n="set_temps" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_temps"/>
							<lit-tag v="pres"/>
						</equal>
					</test>
					<let>
						<var n="v_temps"/>
						<lit-tag v="pri"/>
					</let>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_temps"/>
							<lit-tag v="past"/>
						</equal>
					</test>
					<let>
						<var n="v_temps"/>
						<lit-tag v="pii"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_temps"/>
						<clip pos="1" side="tl" part="a_temps"/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (noun) get gender, if empty set "nt" / OUT: v_gen -->
		<def-macro n="set_gen" npar="1">
			<let>
				<var n="v_gen"/>
				<clip pos="1" side="tl" part="a_gen"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_gen"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="nt"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) get gender, if empty set "mf" / OUT: v_gen -->
		<def-macro n="set_mf_gen" npar="1">
			<let>
				<var n="v_gen"/>
				<clip pos="1" side="tl" part="a_gen"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_gen"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="mf"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) if case already exists in "whole" then clear variable else set nominative / OUT: v_cas -->
		<def-macro n="trim_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="nom"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_cas"/>
						<lit v=""/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (noun) if case already exists in "whole" then clear variable else set nominative / OUT: v_cas_nom (v_cas) -->
		<def-macro n="trim_cas_nom" npar="1">
			<call-macro n="trim_cas">
				<with-param pos="1"/>
			</call-macro>
			<let><var n="v_cas_nom"/><var n="v_cas"/></let>
		</def-macro>


		<!-- (verb) after predicate set default case to dative/accusative? / OUT: v_cas_nom -->
		<def-macro n="chg_cas_nom" npar="1">
			<choose>
				<when>
					<!--<test>
						<not>
							<equal>
								<var n="v_predicate"/>
								<lit v=""/>
							</equal>
						</not>
					</test>-->
					<test>
						<or>
							<equal>
								<var n="v_predicate"/>
								<lit-tag v="vblex"/>
							</equal>
							<equal>
								<var n="v_predicate"/>
								<lit-tag v="vbhaver"/>
							</equal>
						</or>
					</test>
					<choose>
						<when>
							<test>
								<or>
									<equal>
										<var n="v_cas_nom"/>
										<lit-tag v="nom"/>
									</equal>
									<equal>
										<var n="v_cas_nom"/>
										<lit v=""/>
									</equal>
								</or>
							</test>
							<let>
								<var n="v_cas_nom"/>
								<!--<lit-tag v="dat"/>-->
								<lit-tag v="acc"/>
							</let>
						</when>
					</choose>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) set dative if "whole" is not genitive / OUT: v_cas -->
		<def-macro n="trim_dat_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_cas"/>
							<lit-tag v="gen"/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit v=""/>
					</let>
				</when>
				<when> <!-- elseif -->
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="dat"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) set accusative if "whole" is not genitive / OUT: v_cas -->
		<def-macro n="trim_acc_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_cas"/>
							<lit-tag v="gen"/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit v=""/>
					</let>
				</when>
				<when> <!-- else -->
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="acc"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (after PR) get existing case, if empty set "accusative" / OUT: v_cas -->
		<def-macro n="set_acc_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="acc"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (after PR) get existing case, if empty set "dative" / OUT: v_cas -->
		<def-macro n="set_dat_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="dat"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) get existing case, if empty set "nominative" / OUT: v_cas -->
		<def-macro n="set_cas" npar="1">
			<let>
				<var n="v_cas"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_cas"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas"/>
						<lit-tag v="nom"/>
					</let>
				</when>
			</choose>
		</def-macro>

		<!-- (noun) get number, if empty set "sg" / OUT: v_nbr -->
		<def-macro n="set_nbr" npar="1">
			<let>
				<var n="v_nbr"/>
				<clip pos="1" side="tl" part="a_nbr"/>
			</let>
			<choose>
				<when>
					<test>
							<equal>
								<var n="v_nbr"/>
								<lit v=""/>
							</equal>
<!-- 
						<or>
							<equal>
								<var n="v_nbr"/>
								<lit-tag v="sp"/>
							</equal>
							<equal>
								<var n="v_nbr"/>
								<lit v="ND"/>
							</equal>
						</or>
-->
					</test>
					<let>
						<var n="v_nbr"/>
						<lit-tag v="sg"/>
					</let>
				</when>
			</choose>
		</def-macro>

		<!-- (noun) get number, if empty set "sp" / OUT: v_nbr -->
		<def-macro n="set_sp_nbr" npar="1">
			<let>
				<var n="v_nbr"/>
				<clip pos="1" side="tl" part="a_nbr"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_nbr"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_nbr"/>
						<lit-tag v="sp"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) gender if empty set "nt" / OUT: v_gen -->
		<def-macro n="upd_nt_gen" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_gen"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="nt"/>
					</let>
				</when>
			</choose>
		</def-macro>

		<!-- (TL) if "sp" set "sg" / OUT: v_nbr -->
		<def-macro n="chg_sp__sg_nbr" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_nbr"/>
							<lit-tag v="sp"/>
						</equal>
					</test>
					<let>
						<var n="v_nbr"/>
						<lit-tag v="sg"/>
					</let>
				</when>
			</choose>
		</def-macro>

		<!-- (prn) if "mf"/"mfn" set "m" / OUT: v_gen -->
		<def-macro n="chg_mf__m_gen" npar="1">
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<clip pos="1" side="tl" part="a_gen"/>
								<lit-tag v="mf"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_gen"/>
								<lit-tag v="mfn"/>
							</equal>
						</or>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="m"/>
					</let>
				</when>
			</choose>
		</def-macro>

		<!-- (nom) if "sg" set "mf" to "m" / OUT: v_gen -->
		<def-macro n="chg_sg_mf__m_gen" npar="1">
			<choose>
				<when>
					<test>
						<and>
							<equal>
								<clip pos="1" side="tl" part="a_nbr"/>
								<lit-tag v="sg"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_gen"/>
								<lit-tag v="mf"/>
							</equal>
						</and>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="m"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (noun) get person, if empty set "p3" / OUT: v_pers -->
		<def-macro n="set_pers" npar="1">
			<let>
				<var n="v_pers"/>
				<clip pos="1" side="tl" part="a_pers"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_pers"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_pers"/>
						<lit-tag v="p3"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (nom) get case, if empty set "dat" / OUT: v_cas_nom -->
		<def-macro n="set_dat_cas_nom" npar="1">
			<let>
				<var n="v_cas_nom"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_cas_nom"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_cas_nom"/>
						<lit-tag v="dat"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (TL) if "prn.obj" change case to dative / OUT: v_cas_nom -->
		<def-macro n="chg_dat_cas_nom" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_obj_prn"/>
							<lit-tag v="prn.obj"/>
						</equal>
					</test>
					<let>
						<var n="v_cas_nom"/>
						<lit-tag v="dat"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (nom) get case, if empty set "acc" / OUT: v_cas_nom -->
		<def-macro n="set_acc_cas_nom" npar="1">
			<let>
				<var n="v_cas_nom"/>
				<clip pos="1" side="tl" part="a_cas"/>
			</let>
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<var n="v_cas_nom"/>
								<lit v=""/>
							</equal>
							<equal>
								<var n="v_cas_nom"/>
								<lit v="nom"/>
							</equal>
						</or>
					</test>
					<let>
						<var n="v_cas_nom"/>
						<lit-tag v="acc"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (nom) store grammar tags of current noun -->
		<!-- OUT: v_gen_nom, v_nbr_nom, v_cas_nom, v_pers_nom -->
		<def-macro n="set_pers_gen_nbr_cas_nom" npar="1">
			<choose>
				<when> <!-- np.cog always "mf" -->
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_nom"/>
							<lit-tag v="np.cog"/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="mf"/>
					</let>
				</when>
				<when> <!-- np.ant, gender of person -->
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_nom"/>
							<lit-tag v="np.ant"/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<clip pos="1" side="tl" part="a_gen"/>
					</let>
				</when>
				<otherwise>
					<call-macro n="set_gen">
						<with-param pos="1"/>
					</call-macro>
				</otherwise>
			</choose>

			<call-macro n="set_nbr">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_cas">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_pers">
				<with-param pos="1"/>
			</call-macro>

			<call-macro n="chg_sg_mf__m_gen">  <!-- "mf" => "m" -->
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="chg_mfn__pl_nbr">  <!-- (for plural nouns) -->
				<with-param pos="1"/>
			</call-macro>

			<let><var n="v_gen_nom"/><var n="v_gen"/></let>
			<let><var n="v_nbr_nom"/><var n="v_nbr"/></let>
			<let><var n="v_cas_nom"/><var n="v_cas"/></let>
			<let><var n="v_pers_nom"/><var n="v_pers"/></let>

			<call-macro n="chg_cas_nom"> <!-- after predicate set dat/acc -->
				<with-param pos="1"/>
			</call-macro>
		</def-macro>


		<!-- (prn) store grammar tags of current pronoun -->
		<!-- OUT: v_gen_prn, v_nbr_prn, v_cas_prn, v_pers_prn -->
		<def-macro n="set_pers_gen_nbr_cas_prn" npar="1">
			<call-macro n="set_gen">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_nbr">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_cas">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_pers">
				<with-param pos="1"/>
			</call-macro>

			<call-macro n="chg_mf__m_gen">  <!-- "mf" => "m" -->
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="chg_sp__sg_nbr">  <!-- "sp" => "sg" -->
				<with-param pos="1"/>
			</call-macro>

			<let><var n="v_gen_prn"/><var n="v_gen"/></let>
			<let><var n="v_nbr_prn"/><var n="v_nbr"/></let>
			<let><var n="v_cas_prn"/><var n="v_cas"/></let>
			<let><var n="v_pers_prn"/><var n="v_pers"/></let>
		</def-macro>


		<!-- (prn) clear casus variable / OUT: v_cas_prn -->
		<def-macro n="trim_v_cas_prn" npar="1">
			<let>
				<var n="v_cas_prn"/>
				<var n="v_cas_nom"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_prpos"/>
							<lit-tag v="prn.pos"/>
						</equal>
					</test>
					<let>  <!-- without case -->
						<var n="v_cas_prn"/>
						<lit v=""/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (det) if "pl" set "m"/"f"/"nt" to "mfn" / OUT: v_gen -->
		<def-macro n="chg_pl_m_f_nt__mfn_gen" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_nbr"/>
							<lit-tag v="pl"/>
						</equal>
					</test>
					<let>
						<var n="v_gen"/>
						<lit-tag v="mfn"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (adj) if "pl" set "m" or "f" to "mf" / OUT: v_gen_adj -->
		<def-macro n="chg_pl_m_f__mf_gen" npar="1">
			<choose>
				<when>
					<test>
						<and>
							<equal>
								<clip pos="1" side="tl" part="a_nbr"/>
								<lit-tag v="pl"/>
							</equal>
							<or>
								<equal>
									<clip pos="1" side="tl" part="a_gen"/>
									<lit-tag v="m"/>
								</equal>
								<equal>
									<clip pos="1" side="tl" part="a_gen"/>
									<lit-tag v="f"/>
								</equal>
							</or>
						</and>
					</test>
					<let>
						<var n="v_gen_adj"/>
						<lit-tag v="mf"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (nom / plural noun) if "mfn" set "pl" / OUT: v_gen -->
		<def-macro n="chg_mfn__pl_nbr" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_gen"/>
							<lit-tag v="mfn"/>
						</equal>
					</test>
					<let>
						<var n="v_nbr"/>
						<lit-tag v="pl"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (adj) if sint already exists in "whole" then clear variable / OUT: v_sint_adj -->
		<def-macro n="trim_sint_adj" npar="1">
			<let>
				<var n="v_sint_adj"/>
				<clip pos="1" side="tl" part="a_sint_adj"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_sint_adj"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_sint_adj"/>
						<lit-tag v="sint"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_sint_adj"/>
						<lit v=""/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (adj) set type of declension (sw/st/mix) / OUT: v_typ_adj -->
		<def-macro n="set_typ_adj" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_def_det"/>
							<lit-tag v="det.def"/>
						</equal>
					</test>
					<let>
						<var n="v_typ_adj"/>
						<lit-tag v="sw"/>
					</let>
				</when>
				<when>
					<test>
						<or>
							<equal>
								<clip pos="1" side="tl" part="a_det1"/>
								<lit-tag v="det"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="prpers"/>
								<lit-tag v="prn"/>
							</equal>
						</or>
					</test>
					<let>
						<var n="v_typ_adj"/>
						<lit-tag v="mix"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_typ_adj"/>
						<lit-tag v="st"/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (adj) add "sint" tag if not exists / OUT: v_sint_adj, v_a_adj -->
		<def-macro n="set_sint_a_adj" npar="1">
			<let>
				<var n="v_a_adj"/>
				<clip pos="1" side="tl" part="a_adj"/>
			</let>
			<call-macro n="test-if-synthetic">
				<with-param pos="1"/>
			</call-macro>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_sint_adj"/>
							<lit v=""/>
						</equal>
					</test>
					<choose>
						<when>
							<test>
								<equal>
									<var n="v_a_adj"/>
									<lit-tag v="adj.comp"/>
								</equal>
							</test>
							<let>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sint.comp"/>
							</let>
						</when>
						<when>
							<test>
								<equal>
									<var n="v_a_adj"/>
									<lit-tag v="adj.sup"/>
								</equal>
							</test>
							<let>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sint.sup"/>
							</let>
						</when>
						<when>
							<test>
								<equal>
									<var n="v_a_adj"/>
									<lit-tag v="adj"/>
								</equal>
							</test>
							<let>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sint"/>
							</let>
						</when>
					</choose>
				</when>
			</choose>
		</def-macro>


		<!-- (adj) remove "sint" tag / OUT: v_a_adj -->
		<def-macro n="rm_sint_a_adj" npar="1">  <!--(not used)-->
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_adj"/>
							<lit-tag v="adj.sint.comp"/>
						</equal>
					</test>
					<let>
						<var n="v_a_adj"/>
						<lit-tag v="adj.comp"/>
					</let>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_adj"/>
							<lit-tag v="adj.sint.sup"/>
						</equal>
					</test>
					<let>
						<var n="v_a_adj"/>
						<lit-tag v="adj.sup"/>
					</let>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_adj"/>
							<lit-tag v="adj.sint"/>
						</equal>
					</test>
					<let>
						<var n="v_a_adj"/>
						<lit-tag v="adj"/>
					</let>
				</when>
				<otherwise>
					<let>
						<var n="v_a_adj"/>
						<clip pos="1" side="tl" part="a_adj"/>
					</let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (adj / ADJ+NOM) set variables for adjective declension -->
		<!-- OUT: v_gen_adj, v_nbr_adj, v_cas_adj, v_typ_adj, v_a_adj -->
		<def-macro n="set_decl_a_adj" npar="2">
			<call-macro n="set_sint_a_adj">  <!-- OUT: v_a_adj -->
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_gen">
				<with-param pos="2"/>
			</call-macro>
			<call-macro n="set_nbr">
				<with-param pos="2"/>
			</call-macro>
			<call-macro n="set_cas">
				<with-param pos="2"/>
			</call-macro>
			<call-macro n="chg_sg_mf__m_gen">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="chg_pl_m_f__mf_gen">
				<with-param pos="1"/>
			</call-macro>
			
			<let><var n="v_gen_adj"/><var n="v_gen"/></let>
			<let><var n="v_nbr_adj"/><var n="v_nbr"/></let>
			<let><var n="v_cas_adj"/><var n="v_cas"/></let>
			<let><var n="v_typ_adj"/><lit-tag v="st"/></let> <!-- default type -->
		</def-macro>


		<!-- (adj) adj after det, then set type / OUT: v_typ_adj, v_a_adj -->
		<def-macro n="set_decl_typ_a_adj" npar="1">
			<call-macro n="set_sint_a_adj">  <!-- OUT: v_a_adj -->
				<with-param pos="1"/>
			</call-macro>
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sint.comp"/>
							</equal>
							<equal>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sint.sup"/>
							</equal>
							<equal>
								<var n="v_a_adj"/>
								<lit-tag v="adj.comp"/>
							</equal>
							<equal>
								<var n="v_a_adj"/>
								<lit-tag v="adj.sup"/>
							</equal>
						</or>
					</test>
					<let><var n="v_typ_adj"/><lit v=""/></let>
				</when>
				<otherwise>
					<call-macro n="set_typ_adj">
						<with-param pos="1"/>
					</call-macro>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (adj / DET ADJ NOM) adj after det, then set type -->
		<!-- OUT: v_gen_adj, v_nbr_adj, v_cas_adj, v_typ_adj, v_a_adj -->
		<def-macro n="set_decl_det_a_adj" npar="3">
			<call-macro n="set_decl_a_adj">
				<with-param pos="2"/>
				<with-param pos="3"/>
			</call-macro>
			<call-macro n="set_typ_adj">
				<with-param pos="1"/>
			</call-macro>
			</def-macro>


		<!-- (verb) get pers, if empty copy pers from last noun (v_pers_nom) / OUT: v_pers_verb -->
		<def-macro n="set_pers_verb" npar="1">
			<let>
				<var n="v_pers_verb"/>
				<clip pos="1" side="tl" part="a_pers"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_pers_verb"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_pers_verb"/>
						<var n="v_pers_nom"/> <!-- person of last noun -->
					</let>
				</when>
			</choose>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_pers_verb"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_pers_verb"/>
						<lit-tag v="p3"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (verb) get nbr, if empty copy nbr from last noun (v_nbr_nom) / OUT: v_nbr_nom -->
		<def-macro n="set_nbr_verb" npar="1">
			<let>
				<var n="v_nbr_verb"/>
				<clip pos="1" side="tl" part="a_nbr"/>
			</let>
			<choose>
				<when>
					<test>
						<not>
							<equal>
								<var n="v_nbr_nom"/>
								<lit v=""/>
							</equal>
						</not>
					</test>
					<let> <!-- number of noun -->
						<var n="v_nbr_verb"/>
						<var n="v_nbr_nom"/>
					</let>
				</when>
			</choose>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_nbr_verb"/>
							<lit v=""/>
						</equal>
					</test>
					<let>
						<var n="v_nbr_verb"/>
						<lit-tag v="sg"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (verb) / OUT: v_temps, v_pers_verb, v_nbr_verb -->
		<def-macro n="set_temp_pers_nbr_verb" npar="1">
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="pprs"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="pp"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="inf"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="imp"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="ger"/>
							</equal>
							<equal>
								<clip pos="1" side="tl" part="a_temps"/>
								<lit-tag v="subs"/>
							</equal>
						</or>
					</test>
					<!-- some variables may be empty -->
					<let>
						<var n="v_temps"/>
						<clip pos="1" side="tl" part="a_temps"/>
					</let>
					<let>
						<var n="v_pers_verb"/>
						<clip pos="1" side="tl" part="a_pers"/>
					</let>
					<let>
						<var n="v_nbr_verb"/>
						<clip pos="1" side="tl" part="a_nbr"/>
					</let>
				</when>

				<otherwise>
					<!-- all variables with values -->
					<call-macro n="set_temps">
						<with-param pos="1"/>
					</call-macro>
					<call-macro n="set_pers_verb">
						<with-param pos="1"/>
					</call-macro>
					<call-macro n="set_nbr_verb">
						<with-param pos="1"/>
					</call-macro>
				</otherwise>
			</choose>
			<call-macro n="chg_pers_nbr_verb">
				<with-param pos="1"/>
			</call-macro>
			<let><var n="v_temp_verb"/><var n="v_temps"/></let>
			<let>
				<var n="v_predicate"/>
				<clip pos="1" side="tl" part="a_verb"/>
			</let>
		</def-macro>


		<!-- (verb) if "inf" clear variables / OUT: v_pers_verb, v_nbr_verb -->
		<def-macro n="chg_pers_nbr_verb" npar="1">
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<var n="v_temps"/>
								<lit-tag v="inf"/>
							</equal>
							<equal>
								<var n="v_temps"/>
								<lit-tag v="pp"/>
							</equal>
							<equal>
								<var n="v_temps"/>
								<lit-tag v="pprs"/>
							</equal>
						</or>
					</test>
					<let><var n="v_pers_verb"/><lit v=""/></let>
					<let><var n="v_nbr_verb"/><lit v=""/></let>
				</when>		
				<when>
					<test>
						<and>
							<equal>
								<var n="v_temps"/>
								<lit-tag v="imp"/>
							</equal>
							<equal>
								<var n="v_nbr_verb"/>
								<lit v=""/>
							</equal>
						</and>
					</test>
					<let><var n="v_nbr_verb"/><lit-tag v="sg"/></let>
				</when>		
			</choose>
		</def-macro>


		<!-- (prn) convert obj to iobj / change case to dative / OUT: v_obj_prn,v_cas_prn -->
		<def-macro n="set_dat_cas_obj_prn" npar="1">
			<let>
				<var n="v_obj_prn"/>
				<clip pos="1" side="tl" part="a_tipus_prn"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_obj_prn"/>
							<lit-tag v="prn.obj"/>
						</equal>
					</test>
					<let>
						<var n="v_obj_prn"/>
						<lit-tag v="prn.iobj"/>
					</let>
					<let>
						<var n="v_cas_prn"/>
						<lit-tag v="dat"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (prn) convert obj to dobj / change case to accusative / OUT: v_obj_prn,v_cas_prn -->
		<def-macro n="set_acc_cas_dobj_prn" npar="1">
			<let>
				<var n="v_obj_prn"/>
				<clip pos="1" side="tl" part="a_tipus_prn"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<var n="v_obj_prn"/>
							<lit-tag v="prn.obj"/>
						</equal>
					</test>
					<let>
						<var n="v_obj_prn"/>
						<lit-tag v="prn.iobj"/>
					</let>
					<let>
						<var n="v_cas_prn"/>
						<lit-tag v="acc"/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (prn) convert obj to dobj / change case to accusative / OUT: v_obj_prn,v_cas_prn -->
		<def-macro n="chg_acc_cas_a_nom" npar="1">
			<let>
				<var n="v_a_nom"/>
				<lit-tag v="prn.dobj"/>  <!-- direct object -->
			</let>
			<let>
				<var n="v_cas_nom"/>
				<lit-tag v="acc"/>
			</let>
		</def-macro>


		<!-- (itg) / OUT: v_gen, v_nbr, v_cas -->
		<def-macro n="set_gen_nbr_cas_itg" npar="1">
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_prn2"/>
							<lit-tag v="prn.itg"/>
						</equal>
					</test>
					<call-macro n="set_mf_gen">
						<with-param pos="1"/>
					</call-macro>
					<call-macro n="set_sp_nbr">
						<with-param pos="1"/>
					</call-macro>
					<call-macro n="set_cas">
						<with-param pos="1"/>
					</call-macro>
				</when>
				<otherwise>
					<let><var n="v_gen"/><lit v=""/></let>
					<let><var n="v_nbr"/><lit v=""/></let>
					<let><var n="v_cas"/><lit v=""/></let>
				</otherwise>
			</choose>
		</def-macro>


		<!-- (det+nom) set all variables / OUT: v...det, v...nom -->
		<def-macro n="proc_det_nom" npar="2">
			<call-macro n="set_pers_gen_nbr_cas_nom">
				<with-param pos="2"/>
			</call-macro>			
			<call-macro n="chg_pl_m_f_nt__mfn_gen"> <!-- OUT: v_gen -->
				<with-param pos="0"/>
			</call-macro>			
			<let><var n="v_gen_det"/><var n="v_gen"/></let>
			<let><var n="v_nbr_det"/><var n="v_nbr_nom"/></let>
			<let><var n="v_cas_det"/><var n="v_cas_nom"/></let>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="2" side="tl" part="a_cog"/>
							<lit-tag v="np.cog"/>
						</equal>
					</test>
					<let><var n="v_gen_nom"/><lit-tag v="mf"/></let>
				</when>
				<otherwise>
					<call-macro n="chg_pl_m_f_nt__mfn_gen"> <!-- m/f/nt => mfn -->
						<with-param pos="0"/>
					</call-macro>
					<let><var n="v_gen_det"/><var n="v_gen"/></let>			
				</otherwise>
			</choose>
		</def-macro>


		<!-- (prn) / OUT: v...prn -->
		<def-macro n="proc_prpers" npar="1">
			<call-macro n="set_pers_gen_nbr_cas_prn">
				<with-param pos="1"/>
			</call-macro>
			<let>  
				<var n="v_cas_prn"/>
				<lit-tag v="nom"/>
			</let>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_prpos"/>
							<lit-tag v="prn.pos"/>
						</equal>
					</test>
					<let> 
						<var n="v_obj_prn"/>
						<clip pos="1" side="tl" part="a_prpos"/>
					</let>
				</when>
				<otherwise> <!-- "obj" to "iobj" -->
					<call-macro n="set_dat_cas_obj_prn"> <!-- v_obj_prn, v_cas_prn --> 
						<with-param pos="1"/>
					</call-macro>
				</otherwise>
			</choose>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_prpos"/>
							<lit-tag v="prn.pos"/>
						</equal>
					</test>
					<let>  <!-- without case -->
						<var n="v_cas_prn"/>
						<lit v=""/>
					</let>
				</when>
			</choose>
		</def-macro>


		<!-- (PRN + VERB) / OUT: v...prn / v...verb -->
		<def-macro n="proc_prn_verb" npar="2">
			<call-macro n="set_pers_gen_nbr_cas_prn">
				<with-param pos="1"/>
			</call-macro>
			<!--<call-macro n="set_temp_pers_nbr_verb">-->
			<call-macro n="set_temps">
				<with-param pos="2"/>
			</call-macro>

			<let><var n="v_temp_verb"/><var n="v_temps"/></let>
			<let><var n="v_pers_verb"/><var n="v_pers_prn"/></let>
			<let><var n="v_nbr_verb"/><var n="v_nbr_prn"/></let>

			<choose>
				<when>
					<test>
						<or>
							<equal>
								<var n="v_temp_verb"/>
								<lit-tag v="pprs"/>
							</equal>
							<equal>
								<var n="v_temp_verb"/>
								<lit-tag v="pp"/>
							</equal>
							<equal>
								<var n="v_temp_verb"/>
								<lit-tag v="inf"/>
							</equal>
							<equal>
								<var n="v_temp_verb"/>
								<lit-tag v="imp"/>
							</equal>
						</or>
					</test>
					<let><var n="v_pers_verb"/><lit v=""/></let>
					<let><var n="v_nbr_verb"/><lit v=""/></let>
				</when>
			</choose>
		</def-macro>


		<!-- (PRN + VERB) / OUT: v...nom / v...verb -->
		<def-macro n="proc_nom_verb" npar="2">
			<call-macro n="set_pers_gen_nbr_cas_nom">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="trim_cas_nom">
				<with-param pos="1"/>
			</call-macro>
			<call-macro n="set_temp_pers_nbr_verb">
				<with-param pos="2"/>
			</call-macro>

			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="tl" part="a_prn"/>
							<lit-tag v="prn"/>
						</equal>
					</test>
					<call-macro n="set_dat_cas_obj_prn">  <!-- "obj" to "iobj" -->
						<with-param pos="1"/>
					</call-macro>
					<let><var n="v_a_nom"/><var n="v_obj_prn"/></let>
					<choose>
						<when> <!-- copy _prn to _nom -->
							<test>
								<not>
									<equal>
										<var n="v_cas_prn"/>
										<lit v=""/>
									</equal>
								</not>
							</test>
							<let>
								<var n="v_cas_nom"/> <!-- proc out is v...nom -->
								<var n="v_cas_prn"/>
							</let>
						</when>
					</choose>
					<let><var n="v_pers_tmp"/><var n="v_pers_nom"/></let>
				</when>
				<otherwise>
					<let>
						<var n="v_a_nom"/>
						<clip pos="1" side="tl" part="a_nom"/>
					</let>
					<let><var n="v_pers_tmp"/><lit v=""/></let>
				</otherwise>
			</choose>

			<!-- verb gets person and number from noun -->
			<let><var n="v_pers_verb"/><var n="v_pers_nom"/></let>
			<let><var n="v_nbr_verb"/><var n="v_nbr_nom"/></let>
			<call-macro n="chg_pers_nbr_verb">
				<with-param pos="2"/>
			</call-macro>

			<let><var n="v_pers_nom"/><var n="v_pers_tmp"/></let>
		</def-macro>


	</section-def-macros>


	<section-rules>

		<rule comment="RULE: PRN">
			<pattern>
				<pattern-item n="prn"/>
			</pattern>
			<action>
				<modify-case>
					<clip pos="1" side="tl" part="lem"/>
					<lit v="aa"/>
				</modify-case>
				<call-macro n="set_pers_gen_nbr_cas_prn">  <!-- OUT: v_..._prn -->
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="prn" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_prn2"/>
							<var n="v_gen_prn"/>
							<var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PRPERS">
			<pattern>
				<pattern-item n="prpers"/>
			</pattern>
			<action>
				<call-macro n="proc_prpers">  <!-- OUT: v_..._prn -->
					<with-param pos="1"/>
				</call-macro>
				<choose>
					<when>
						<test>
							<equal>
								<clip pos="1" side="tl" part="a_prpos"/>
								<lit-tag v="prn.det"/>
							</equal>
						</test>
						<out>
							<chunk name="prpers" case="caseFirstWord">
								<tags>
									<!--<tag><lit-tag v="SN"/></tag>-->
									<tag><lit-tag v="PRN"/></tag>
									<tag><var n="v_pers_prn"/></tag>
									<tag><var n="v_gen_prn"/></tag>
									<tag><var n="v_nbr_prn"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lem"/>
									<clip pos="1" side="tl" part="a_prpos"/>
									<var n="v_pers_prn"/>
									<var n="v_gen_prn"/>
									<var n="v_nbr_prn"/>
									<var n="v_cas_prn"/>
								</lu>
							</chunk>
						</out>
					</when>

					<otherwise>
						<out>
							<chunk name="prpers" case="caseFirstWord">
								<tags>
									<!--<tag><lit-tag v="SN"/></tag>-->
									<tag><lit-tag v="PRN"/></tag>
									<tag><var n="v_pers_prn"/></tag>
									<tag><var n="v_gen_prn"/></tag>
									<tag><var n="v_nbr_prn"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lem"/>
									<var n="v_obj_prn"/>    <!-- obj to iobj -->
									<var n="v_pers_prn"/>
									<var n="v_gen_prn"/>
									<var n="v_nbr_prn"/>
									<var n="v_cas_prn"/>
								</lu>
							</chunk>
						</out>
					</otherwise>
				</choose>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PRPERS NOM">
			<pattern>
				<pattern-item n="prpers_det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_prpos"/>
							<clip pos="1" side="tl" part="a_pers"/>
							<clip pos="1" side="tl" part="a_gen"/>
							<clip pos="1" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>    <!-- case from noun -->
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PRPERS GEN NOM">
			<pattern>
				<pattern-item n="prpers_det"/>
				<pattern-item n="gen_nom"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="det_nom_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_prpos"/>
							<clip pos="1" side="tl" part="a_pers"/>
							<clip pos="1" side="tl" part="a_gen"/>
							<clip pos="1" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>    <!-- case from noun -->
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- add case for German noun declension -->
		<rule comment="RULE: NOM">
			<pattern>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<clip pos="1" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- add case for noun declension -->
		<rule comment="RULE: MRS COG">
			<pattern>
				<pattern-item n="mrs"/>
				<pattern-item n="cog_np"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="1"/>
				</call-macro>
				<let><var n="v_pers_det"/><var n="v_pers_nom"/></let>
				<let><var n="v_gen_det"/><var n="v_gen_nom"/></let>
				<let><var n="v_nbr_det"/><var n="v_nbr_nom"/></let>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="2"/>
				</call-macro>
				<let><var n="v_cas_det"/><var n="v_cas_nom"/></let>
				<out>
					<chunk name="nom_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_nom"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET NOM">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET NOM ADJ">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="nom"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="det_nom_adj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
							<lit-tag v="pred"/>
						</lu>
						<!-- <lu>
							<lit v="am"/>
							<lit-tag v="pr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<lit-tag v="adj.sint.sup.nt.sg.dat.mix"/>
						</lu> -->
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- (pl): "James and Mary are" => "James und Mary sind" -->
		<rule comment="RULE: NOUNS AND NOUNS VERBBE">
			<pattern>
				<pattern-item n="nouns"/>
				<pattern-item n="and"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbbe"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="4"/>
				</call-macro>
				<let><var n="v_pers_verb"/><lit-tag v="p3"/></let>
				<let><var n="v_nbr_verb"/><lit-tag v="pl"/></let>
				<out>
					<chunk name="nom_cnj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_nom"/>
							<clip pos="1" side="tl" part="a_gen"/>
							<clip pos="1" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="3"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="4" side="tl" part="lemh"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="4" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- (pl): "Mr and Mrs Brown are" = "Herr und Frau Brown sind" -->
		<rule comment="RULE: MR AND MRS COG VERBS">
			<pattern>
				<pattern-item n="mrs"/>
				<pattern-item n="and"/>
				<pattern-item n="mrs"/>
				<pattern-item n="cog_np"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="5"/>
				</call-macro>
				<out>
					<chunk name="nom_cnj_nom_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><lit-tag v="pl"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
							<lit-tag v="nom"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
							<lit-tag v="nom"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="whole"/>
							<lit-tag v="nom"/>
						</lu>
					</chunk>
					<b pos="4"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="5" side="tl" part="lemh"/>
							<clip pos="5" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<lit-tag v="p3"/>
							<lit-tag v="pl"/>
							<clip pos="5" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- ten years ago  =>  vor zehn Jahren -->
		<rule comment="RULE: NUM PERIODS ADV =} ADV NUM PERIODS">
			<pattern>
				<pattern-item n="num"/>
				<pattern-item n="periods"/>
				<pattern-item n="adv"/>
			</pattern>
			<action>
				<call-macro n="trim_dat_cas">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="adv_num_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><clip pos="2" side="tl" part="a_gen"/></tag>
							<tag><clip pos="2" side="tl" part="a_nbr"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
							<var n="v_cas"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- the Smith Family  =>  die Familie Smith -->
		<rule comment="RULE: DET COG FAMILY">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="names"/>
				<pattern-item n="family"/>
			</pattern>
			<action>
				<call-macro n="set_cas">
					<with-param pos="3"/>
				</call-macro>
				<let><var n="v_cas_det"/><var n="v_cas"/></let>
				<call-macro n="trim_cas">
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="det_nom_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><clip pos="3" side="tl" part="a_gen"/></tag>
							<tag><clip pos="3" side="tl" part="a_nbr"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
							<clip pos="3" side="tl" part="a_gen"/>
							<clip pos="3" side="tl" part="a_nbr"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
							<var n="v_cas"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET ADJ NOM">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="set_decl_det_a_adj">
					<with-param pos="1"/>
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="det_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
						    <var n="v_gen_det"/>
						    <var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <!--<var n="v_gen_nom"/>-->
						    <var n="v_gen_adj"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET NUM NOM">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="num"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="det_num_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
						    <var n="v_gen_det"/>
						    <var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PRPERS ADJ NOM">
			<pattern>
				<pattern-item n="prpers"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_prn">
					<with-param pos="1"/>
				</call-macro>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="2"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="trim_v_cas_prn">  <!-- case from noun -->
					<with-param pos="1"/>
				</call-macro>

				<out>
					<chunk name="prn_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_prpos"/>
							<clip pos="1" side="tl" part="a_pers"/>
							<var n="v_gen_prn"/>
						    <var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>  <!-- case from noun -->
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ NOM">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="1"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
						    <var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- predicative adjective -->
		<rule comment="RULE: NOM ADJ">
			<pattern>
				<pattern-item n="nom"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="1"/>
				</call-macro>

				<choose>
					<when>
						<test>
							<equal>
								<clip pos="2" side="tl" part="a_adj"/>
								<lit-tag v="adj.sint.sup"/>
							</equal>
						</test>
						<out>
							<chunk name="nom_adj" case="caseFirstWord">
								<tags>
									<tag><lit-tag v="SN"/></tag>
									<tag><var n="v_gen_nom"/></tag>
									<tag><var n="v_nbr_nom"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lem"/>
									<clip pos="1" side="tl" part="a_nom"/>
									<var n="v_gen_nom"/>
									<var n="v_nbr_nom"/>
									<var n="v_cas_nom"/>
								</lu>
								<b pos="1"/>
								<lu>
									<lit v="am"/>  <!--"dat"-->
									<lit-tag v="pr"/>
								</lu>
								<b pos="1"/>
								<lu>
									<clip pos="2" side="tl" part="lem"/>
									<clip pos="2" side="tl" part="a_adj"/>
									<lit-tag v="pred"/>
								</lu>
							</chunk>
						</out>
					</when>
					
					<otherwise>
						<out>
							<chunk name="nom_adj" case="caseFirstWord">
								<tags>
									<tag><lit-tag v="SN"/></tag>
									<tag><var n="v_gen_nom"/></tag>
									<tag><var n="v_nbr_nom"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lem"/>
									<clip pos="1" side="tl" part="a_nom"/>
									<var n="v_gen_nom"/>
									<var n="v_nbr_nom"/>
									<var n="v_cas_nom"/>
								</lu>
								<b pos="1"/>
								<lu>
									<clip pos="2" side="tl" part="lem"/>
									<clip pos="2" side="tl" part="a_adj"/>
									<lit-tag v="pred"/>
								</lu>
							</chunk>
						</out>
					</otherwise>
				</choose>

				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ CONJ ADJ">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="conj"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<let>
					<var n="v_a_adj"/>
					<clip pos="1" side="tl" part="a_adj"/>
				</let>
				<let>
					<var n="v_a_adj1"/>
					<var n="v_a_adj"/>
				</let>
				<let>
					<var n="v_a_adj"/>
					<clip pos="1" side="tl" part="a_adj"/>
				</let>
				<out>
					<chunk name="adj_cnj_adj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="ADJ"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj1"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ ADJ NOM">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="1"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adj_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ CNJ ADJ NOM">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="conj"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="1"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="adj_cnj_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ COMA ADJ NOM">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="coma"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="adj_cm_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADJ">
			<pattern>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="set_sint_a_adj">  <!-- OUT: v_a_adj -->
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="adj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="ADJ"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- more expensive => teurer -->
		<rule comment="RULE: MORE ADJ">
			<pattern>
				<pattern-item n="more"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="trim_sint_adj">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="adv_adj">
						<tags>
							<tag><lit-tag v="ADJ"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
							<var n="v_sint_adj"/>
							<lit-tag v="comp"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- most expensive => am teuersten -->
		<rule comment="RULE: MOST ADJ">
			<pattern>
				<pattern-item n="most"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="test-if-synthetic">
					<with-param pos="2"/>
				</call-macro>
				<choose>
					<when>
						<test>
							<not>
								<equal>
									<var n="v_sint_adj"/>
									<lit v="sint"/>
								</equal>
							</not>
						</test>
						<out>
							<chunk name="adv_adj">
								<tags>
									<tag><lit-tag v="ADJ"/></tag>
								</tags>
								<lu>
									<lit v="am"/>  <!--"dat"-->
									<lit-tag v="pr"/>
								</lu>
								<b pos="1"/>
								<lu>
									<clip pos="2" side="tl" part="lem"/>
									<lit-tag v="adj.sint.sup.nt.sg.dat.mix"/>
								</lu>
							</chunk>
						</out>
					</when>
					<otherwise>
						<out>
							<chunk name="adv_adj">
								<tags>
									<tag><lit-tag v="ADJ"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="whole"/>
								</lu>
								<b pos="1"/>
								<lu>
									<clip pos="2" side="tl" part="whole"/>
								</lu>
							</chunk>
						</out>
					</otherwise>
				</choose>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADV ADJ NOM">
			<pattern>
				<pattern-item n="adv"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_decl_typ_a_adj">
					<with-param pos="2"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET ADV ADJ NOM">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="adv"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="4"/>
				</call-macro>
				<call-macro n="set_decl_det_a_adj">
					<with-param pos="1"/>
					<with-param pos="3"/>
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="det_adv_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
						    <var n="v_gen_det"/>
						    <var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <!--<var n="v_gen_nom"/>-->
						    <var n="v_gen_adj"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET ADJ ADJ NOM">
			<pattern>
				<pattern-item n="det"/>
				<pattern-item n="adj"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="1"/>
					<with-param pos="4"/>
				</call-macro>
				<call-macro n="set_decl_det_a_adj">
					<with-param pos="1"/>
					<with-param pos="3"/>
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="det_adv_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_det"/>
						    <var n="v_gen_det"/>
						    <var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <!--<var n="v_gen_nom"/>-->
						    <var n="v_gen_adj"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADV ADJ">
			<pattern>
				<pattern-item n="adv"/>
				<pattern-item n="adj"/>
			</pattern>
			<action>
				<call-macro n="set_sint_a_adj">  <!-- OUT: v_a_adj -->
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="adv_adj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="ADJ"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- ADJ ADV => ADV ADJ -->
		<rule comment="RULE: ADJ ADV">
			<pattern>
				<pattern-item n="adj"/>
				<pattern-item n="adv"/>
			</pattern>
			<action>
				<call-macro n="set_sint_a_adj">  <!-- OUT: v_a_adj -->
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="adv_adj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="ADJ"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PR">
			<pattern>
				<pattern-item n="prep"/>
			</pattern>
			<action>
				<out>
					<chunk name="pr" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="PR"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- preposition with dative -->
		<rule comment="RULE: PRDAT DET NOM">
			<pattern>
				<pattern-item n="dat_prep"/>
				<pattern-item n="det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<let><var n="v_cas_det"/><lit-tag v="dat"/></let>
				<let><var n="v_cas_nom"/><lit-tag v="dat"/></let>
				<out>
					<chunk name="pr_det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_det"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- preposition with dative -->
		<rule comment="RULE: PRDAT DET NUM NOM">
			<pattern>
				<pattern-item n="dat_prep"/>
				<pattern-item n="det"/>
				<pattern-item n="num"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="2"/>
					<with-param pos="4"/>
				</call-macro>
				<let><var n="v_cas_det"/><lit-tag v="dat"/></let> <!-- dative -->
				<let><var n="v_cas_nom"/><lit-tag v="dat"/></let> <!-- dative -->
				<out>
					<chunk name="pr_det_num_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_det"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- preposition with dative -->
		<rule comment="RULE: PRDAT PRPERS NOM">
			<pattern>
				<pattern-item n="dat_prep"/>
				<pattern-item n="prpers_det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<let><var n="v_cas_nom"/><lit-tag v="dat"/></let> <!-- dative -->
				<out>
					<chunk name="pr_det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><clip pos="3" side="tl" part="a_gen"/></tag>
							<tag><clip pos="3" side="tl" part="a_nbr"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_prpos"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<clip pos="2" side="tl" part="a_gen"/>
							<clip pos="2" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<clip pos="3" side="tl" part="a_gen"/>
							<clip pos="3" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- preposition with genitive -->
		<rule comment="RULE: PRGEN PRPERS NOM">
			<pattern>
				<pattern-item n="gen_prep"/>
				<pattern-item n="any_det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="3"/>
				</call-macro>
				<let><var n="v_cas_nom"/><lit-tag v="gen"/></let> <!-- genitive -->
				<out>
					<chunk name="pr_det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><clip pos="3" side="tl" part="a_gen"/></tag>
							<tag><clip pos="3" side="tl" part="a_nbr"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_prpos"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<clip pos="2" side="tl" part="a_gen"/>
							<clip pos="2" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<clip pos="3" side="tl" part="a_gen"/>
							<clip pos="3" side="tl" part="a_nbr"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>

<!--35-->
		<!-- "to" LOC => "nach" LOC -->
		<rule comment="RULE: PR NOM">
			<pattern>
				<pattern-item n="to"/>
				<pattern-item n="location"/>
			</pattern>
			<action>
				<call-macro n="set_pers_gen_nbr_cas_nom">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="pr_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<lit v="nach"/>
							<clip pos="1" side="tl" part="a_pr"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lemh"/>
							<clip pos="2" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<clip pos="2" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- PR with accusative (if not dative) -->
		<rule comment="RULE: PR DET NOM">
			<pattern>
				<pattern-item n="prep"/>
				<pattern-item n="det"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="set_acc_cas_nom"> <!--v_cas_nom-->
					<with-param pos="1"/>
				</call-macro>
			    <let><var n="v_cas_det"/><var n="v_cas_nom"/></let>
				<out>
					<chunk name="pr_det_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_det"/>
							<var n="v_gen_det"/>
							<var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: PR DET ADJ NOM">
			<pattern>
				<pattern-item n="prep"/>
				<pattern-item n="det"/>
				<pattern-item n="adj"/>
				<pattern-item n="nom"/>
			</pattern>
			<action>
				<call-macro n="proc_det_nom">
					<with-param pos="2"/>
					<with-param pos="4"/>
				</call-macro>
				<call-macro n="set_decl_det_a_adj">
					<with-param pos="2"/>
					<with-param pos="3"/>
					<with-param pos="4"/>
				</call-macro>
				<call-macro n="set_dat_cas_nom">  <!--set dative -->
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="pr_det_adj_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_pr"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_det"/>
						    <var n="v_gen_det"/>
						    <var n="v_nbr_det"/>
							<var n="v_cas_det"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_adj"/>
						    <!--<var n="v_gen_nom"/>-->
						    <var n="v_gen_adj"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
							<var n="v_typ_adj"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_nom"/>
						    <var n="v_gen_nom"/>
						    <var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: DET">
			<pattern>
				<pattern-item n="det"/>
			</pattern>
			<action>
				<out>
					<chunk name="det" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="DET"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: NUM">
			<pattern>
				<pattern-item n="num"/>
			</pattern>
			<action>
				<out>
					<chunk name="num" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="NUM"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>

<!--40-->
		<rule comment="RULE: REL">
			<pattern>
				<pattern-item n="rel_prn"/>
			</pattern>
			<action>
				<out>
					<chunk name="rel">
						<tags>
							<tag><lit-tag v="REL"/></tag>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_rel"/>
							<clip pos="1" side="tl" part="a_gen"/>
							<clip pos="1" side="tl" part="a_nbr"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: VERBS">
			<pattern>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="1"/>
				</call-macro>
				<choose>
					<when>  <!-- BE: have got => have -->
						<test>
							<equal>
								<clip pos="1" side="sl" part="lem"/>
								<lit v="have# got"/>
							</equal>
						</test>
						<out>
							<chunk name="verb">
								<tags>
									<tag><lit-tag v="SV"/></tag>
								</tags>
								<lu>
									<lit v="haben"/>
									<lit-tag v="vbhaver"/>
									<var n="v_temp_verb"/>
									<clip pos="1" side="tl" part="a_pers"/>
									<clip pos="1" side="tl" part="a_nbr"/>
								</lu>
							</chunk>
						</out>
					</when>

					<otherwise>
						<out>
							<chunk name="verb">
								<tags>
									<tag><lit-tag v="SV"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lemh"/>
									<clip pos="1" side="tl" part="a_verb"/>
									<var n="v_temp_verb"/>  <!-- converted tense tag -->
									<var n="v_pers_verb"/>
									<var n="v_nbr_verb"/>
									<clip pos="1" side="tl" part="lemq"/>
								</lu>
							</chunk>
						</out>
					</otherwise>
				</choose>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: TO VERBS">
			<pattern>
				<pattern-item n="to"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<out>
					<chunk name="to_verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "he is going to do" => "er will tun" -->
		<rule comment="RULE: NOUNS VERBBE GO TO VERBS">
			<pattern>
				<pattern-item n="nouns"/>
				<pattern-item n="verbbe"/>
				<pattern-item n="go"/>
				<pattern-item n="to"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/> <!-- null if nom  -->
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="verb_verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<lit v="will"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b pos="4"/>
						<lu>
							<clip pos="5" side="tl" part="lem"/>
							<clip pos="5" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "first he is going to do" => "zuerst will er tun" -->
		<rule comment="RULE: ADV NOUNS VERBBE GO TO VERBS">
			<pattern>
				<pattern-item n="adv2"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbbe"/>
				<pattern-item n="go"/>
				<pattern-item n="to"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_verb_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<lit v="will"/>
							<clip pos="6" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="5"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="6" side="tl" part="lem"/>
							<clip pos="6" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "he is going" => "er geht" -->
		<rule comment="RULE: PRPERS VERBBE VERBS">
			<pattern>
				<pattern-item n="prpers"/>
				<pattern-item n="verbbe"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<let><var n="v_predicate"/><clip pos="3" side="tl" part="a_verb"/></let>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<!--<tag><lit-tag v="SN"/></tag>-->
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="lemh"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="3" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!--  "is going to do" ==> "will tun" -->
		<rule comment="RULE: VERBNM GO TO VERBNM =} will VERBNM">
			<pattern>
				<pattern-item n="verbnm"/>
				<pattern-item n="go"/>
				<pattern-item n="to"/>
				<pattern-item n="verbnm"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="4"/>
				</call-macro>
				<out>
					<chunk name="verb_verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<lit v="will"/>
							<clip pos="1" side="tl" part="a_verb"/>
							<clip pos="1" side="tl" part="a_temps"/>
							<clip pos="1" side="tl" part="a_pers"/>
							<clip pos="1" side="tl" part="a_nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="4" side="tl" part="lemh"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="4" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "be" + <vblex><pp> -->
		<rule comment="RULE: VERBNM VERBS">
			<pattern>
				<!--<pattern-item n="verbnm"/>-->
				<pattern-item n="verbbe"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="set_temps">
					<with-param pos="1"/>
				</call-macro>
				<choose>

					<when>  <!-- BE: have got => have -->
						<test>
							<and>
								<equal>
									<clip pos="1" side="sl" part="lem"/>
									<lit v="have"/>
								</equal>
								<equal>
									<clip pos="2" side="sl" part="lem"/>
									<lit v="got"/>
								</equal>
							</and>
						</test>
						<out>
							<chunk name="verb">
								<tags>
									<tag><lit-tag v="SV"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="whole"/>
								</lu>
							</chunk>
						</out>
					</when>

					<when>
						<test>
							<and>
								<equal>
									<clip pos="1" side="sl" part="lem"/>
									<lit v="be"/>
								</equal>
								<or>
									<equal>
										<clip pos="1" side="sl" part="a_temps"/>
										<lit-tag v="pri"/>
									</equal>
									<equal>
										<clip pos="1" side="sl" part="a_temps"/>
										<lit-tag v="pres"/>
									</equal>
									<equal>
										<clip pos="1" side="sl" part="a_temps"/>
										<lit-tag v="past"/>
									</equal>
								</or>
								<or>
									<equal>
										<clip pos="2" side="sl" part="a_temps"/>
										<lit-tag v="pprs"/>
									</equal>
									<equal>
										<clip pos="2" side="sl" part="a_temps"/>
										<lit-tag v="ger"/>  <!-- because of bad PoS tagging -->
									</equal>
								</or>
							</and>
						</test>
						<out>
							<chunk name="verb">
								<tags>
									<tag><lit-tag v="SV"/></tag>
								</tags>
								<!-- <lu><lit v="am"/><lit-tag v="pr"/></lu> <b/> -->
								<lu>
									<clip pos="2" side="tl" part="lemh"/>
									<clip pos="2" side="tl" part="a_verb"/>
									<var n="v_temps"/>
									<clip pos="1" side="tl" part="a_pers"/>
									<clip pos="1" side="tl" part="a_nbr"/>
									<clip pos="2" side="tl" part="lemq"/>
								</lu>
							</chunk>
						</out>
					</when>

					<otherwise>
						<out>
							<chunk name="verb_verb">
								<tags>
									<tag><lit-tag v="SV"/></tag>
								</tags>
								<lu>
									<clip pos="1" side="tl" part="lem"/>
									<clip pos="1" side="tl" part="a_verb"/>
									<clip pos="1" side="tl" part="a_temps"/>
									<clip pos="1" side="tl" part="a_pers"/>
									<clip pos="1" side="tl" part="a_nbr"/>
								</lu>
								<b pos="1"/>
								<lu>
									<clip pos="2" side="tl" part="lemh"/>
									<clip pos="2" side="tl" part="a_verb"/>
									<clip pos="2" side="tl" part="a_temps"/>
									<clip pos="2" side="tl" part="a_pers"/>
									<clip pos="2" side="tl" part="a_nbr"/>
									<clip pos="2" side="tl" part="lemq"/>
								</lu>
							</chunk>
						</out>
					</otherwise>
				</choose>
				<let><var n="v_predicate"/><clip pos="2" side="tl" part="a_verb"/></let>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!--  BE: "haven't got" => "haben kein" -->
		<rule comment="RULE: HAVE NOT GOT =} HAVE NO">
			<pattern>
				<pattern-item n="verbhave"/>
				<pattern-item n="not"/>
				<pattern-item n="got"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="verb_adv">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b pos="1"/>
						<lu>
							<lit v="kein"/>
							<lit-tag v="det.ind.nt.acc"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!--  BE: "has he got" => "hat er" -->
		<rule comment="RULE: HAVE NOUNS GOT =} HAVE NOUNS">
			<pattern>
				<pattern-item n="verbhave"/>
				<pattern-item n="nouns"/>
				<pattern-item n="got"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="1"/>
				</call-macro>
				<call-macro n="set_pers_gen_nbr_cas_prn">
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="prn">
						<tags>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_tipus_prn"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<var n="v_gen_prn"/>
							<var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>

<!--50-->
		<!-- "do you know" => "kennst du" -->
		<rule comment="RULE: VERBDO PRPERS VERBNM =} VERBNM PRPERS">
			<pattern>
				<pattern-item n="verbdo"/>
				<pattern-item n="prpers"/>
				<pattern-item n="verbnm"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="prn">
						<tags>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>

<!--51-->
		<rule comment="RULE: NOUNS VERBM VERBS">
			<pattern>
				<pattern-item n="nouns"/>
				<pattern-item n="verbm"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="nom_verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_verb"/>
							<var n="v_temps"/>      <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
					</chunk>
					<b pos="2"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "you can" => "du kannst" -->
		<rule comment="RULE: PRPERS VERBS">
			<pattern>
				<pattern-item n="prpers"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<out>
					<chunk name="prn" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "I don't know" => "ich kenne nicht" -->
		<rule comment="RULE: NOUNS VERBDO ADV VERBNM =} NOUNS VERBNM ADV">
			<pattern>
				<pattern-item n="nouns"/>
				<pattern-item n="verbdo"/>
				<pattern-item n="adv"/>
				<pattern-item n="verbnm"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<call-macro n="set_temps"> <!--(use temps of verb2)-->
					<with-param pos="2"/>  <!-- OUT: v_temps -->
				</call-macro>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="verb_adv">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<var n="v_temps"/>      <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "I can not go" => "ich kann nicht gehen" -->
		<rule comment="RULE: NOUNS VERBM ADV VERBNM">
			<pattern>
				<pattern-item n="nouns"/>
				<pattern-item n="verbm"/>
				<pattern-item n="adv"/>
				<pattern-item n="verbnm"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="1"/>
					<with-param pos="2"/>
				</call-macro>
				<call-macro n="set_temps"> <!--(use temps of verb2)-->
					<with-param pos="2"/>  <!-- OUT: v_temps -->
				</call-macro>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="verb_adv">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_verb"/>
							<var n="v_temps"/>      <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="3" side="tl" part="whole"/>
						</lu>
					</chunk>
					<b pos="3"/>
					
					<chunk name="verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "don't go" => "gehe nicht" -->
		<rule comment="RULE: VERBDO ADV VERBNM =} VERBNM ADV">
			<pattern>
				<pattern-item n="verbdo"/>
				<pattern-item n="adv"/>
				<pattern-item n="verbnm"/>
			</pattern>
			<action>
				<call-macro n="set_temp_pers_nbr_verb">
					<with-param pos="3"/>
				</call-macro>
				<call-macro n="set_temps"> <!--(exec after pos="3"!)-->
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="verb_adv" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
						<b/>
						<lu>
							<clip pos="2" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "first he is going" => "zuerst geht er" -->
		<rule comment="RULE: ADV NOUNS BE VERBS =} ADV VERBS NOUNS">
			<pattern>
				<pattern-item n="adv"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbbe"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_prn_verb">  <!-- OUT: v...prn / v...verb -->
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="4" side="tl" part="lemh"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="4" side="tl" part="lemq"/>
						</lu>
					</chunk>
					<b pos="2"/>
					
					<chunk name="nom">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_prn"/></tag>
							<tag><var n="v_nbr_prn"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_tipus_prn"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<var n="v_gen_prn"/>
							<var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "after he had travelled" => "nachdem er gereist war" -->
		<rule comment="RULE: ADV NOUNS HAVE VERBS">
			<pattern>
				<pattern-item n="adv"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbhave"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="2"/>
					
					<chunk name="verb_verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<lit-tag v="pp"/>
						</lu>
						<b pos="3"/>
						<lu>
							<clip pos="3" side="tl" part="lemh"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<!-- <lit v="sein"/>
							<lit-tag v="vbser"/> -->
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="3" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "first he must go" => "zuerst muss er gehen" -->
		<rule comment="RULE: ADV NOUNS VERBM VERBS =} ADV VERBM NOUNS VERBS">
			<pattern>
				<pattern-item n="adv2"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbm"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_prn_verb">
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
						</lu>
					</chunk>
					<b pos="2"/>
					
					<chunk name="nom">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_prn"/></tag>
							<tag><var n="v_nbr_prn"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_tipus_prn"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<var n="v_gen_prn"/>
							<var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>
						</lu>
					</chunk>
					<b pos="3"/>
					
					<chunk name="verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="4" side="tl" part="lem"/>
							<clip pos="4" side="tl" part="a_verb"/>
							<lit-tag v="inf"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "first he must" => "zuerst muss er" -->
		<rule comment="RULE: ADV NOUNS VERBS =} ADV VERBS NOUNS">
			<pattern>
				<pattern-item n="adv2"/>
				<pattern-item n="nouns"/>
				<pattern-item n="verbs"/>
			</pattern>
			<action>
				<call-macro n="proc_prn_verb">
					<with-param pos="2"/>
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="adv_verb" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="1"/>
						<lu>
							<clip pos="3" side="tl" part="lemh"/>
							<clip pos="3" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="3" side="tl" part="lemq"/>
						</lu>
					</chunk>
					<b pos="2"/>

					<chunk name="nom">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_prn"/></tag>
							<tag><var n="v_nbr_prn"/></tag>
						</tags>
						<lu>
							<clip pos="2" side="tl" part="lem"/>
							<clip pos="2" side="tl" part="a_tipus_prn"/>
							<clip pos="2" side="tl" part="a_pers"/>
							<var n="v_gen_prn"/>
							<var n="v_nbr_prn"/>
							<var n="v_cas_prn"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- "just picked them" => "sie eben gepflückt" -->
		<rule comment="RULE: ADV VERBS PRPERS =} PRPERS ADV VERBS">
			<pattern>
				<pattern-item n="adv1"/>
				<pattern-item n="verbs"/>
				<pattern-item n="prpers"/>
				<!--<pattern-item n="nouns"/>-->
			</pattern>
			<action>
				<call-macro n="proc_nom_verb"> <!-- OUT: v...nom / v...verb -->
					<with-param pos="3"/>
					<with-param pos="2"/>
				</call-macro>
				<call-macro n="chg_acc_cas_a_nom"> <!-- OUT: v_a_nom / v_cas_nom -->
					<with-param pos="3"/>
				</call-macro>
				<out>
					<chunk name="nom" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="SN"/></tag>
							<tag><var n="v_gen_nom"/></tag>
							<tag><var n="v_nbr_nom"/></tag>
						</tags>
						<lu>
							<clip pos="3" side="tl" part="lem"/>
							<var n="v_a_nom"/>    <!-- prn or nom -->
							<var n="v_pers_nom"/>
							<var n="v_gen_nom"/>
							<var n="v_nbr_nom"/>
							<var n="v_cas_nom"/>
						</lu>
					</chunk>
					<b pos="1"/>
					
					<chunk name="adv_verb">
						<tags>
							<tag><lit-tag v="SV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
						<b pos="2"/>
						<lu>
							<clip pos="2" side="tl" part="lemh"/>
							<clip pos="2" side="tl" part="a_verb"/>
							<var n="v_temp_verb"/>  <!-- converted tense tag -->
							<var n="v_pers_verb"/>
							<var n="v_nbr_verb"/>
							<clip pos="2" side="tl" part="lemq"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: ADV">
			<pattern>
				<pattern-item n="adv"/>
			</pattern>
			<action>
				<out>
					<chunk name="adv" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="ADV"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<!-- (prn.itg / adv.itg) -->
		<rule comment="RULE: ITG">
			<pattern>
				<pattern-item n="itg"/>
			</pattern>
			<action>
				<call-macro n="set_gen_nbr_cas_itg">
					<with-param pos="1"/>
				</call-macro>
				<out>
					<chunk name="prn" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="PRN"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lem"/>
							<clip pos="1" side="tl" part="a_itg"/>
							<var n="v_gen"/>
							<var n="v_nbr"/>
							<var n="v_cas"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: CONJ">
			<pattern>
				<pattern-item n="conj"/>
			</pattern>
			<action>
				<out>
					<chunk name="cnj" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="CONJ"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let><var n="caseFirstWord"/><lit v="aa"/></let>
			</action>
		</rule>


		<rule comment="RULE: SENT"> <!-- RULE: reset variables-->
			<pattern>
				<pattern-item n="sent"/>
			</pattern>
			<action>
				<let><var n="v_predicate"/><lit v=""/></let>
				<out>
					<chunk name="punt">
						<tags>
							<tag><lit-tag v="sent"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="whole"/>
						</lu>
					</chunk>
				</out>
				<let>
					<var n="caseFirstWord"/>
					<lit v="Aa"/>
				</let>
			</action>
		</rule>


	</section-rules>

</transfer>
